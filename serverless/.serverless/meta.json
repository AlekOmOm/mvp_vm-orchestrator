{
  "/Users/alek/code/work/vm/vm-orchestrator/mvp_vm-orchestrator/serverless/serverless.yml": {
    "versionFramework": "4.17.2",
    "servicePath": "/Users/alek/code/work/vm/vm-orchestrator/mvp_vm-orchestrator/serverless/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "caesari",
      "app": "vm-orchestrator",
      "service": "vm-orchestrator-api",
      "plugins": [
        "serverless-dotenv-plugin"
      ],
      "custom": {
        "dotenv": {
          "exclude": [
            "AWS_ACCESS_KEY_ID",
            "AWS_SECRET_ACCESS_KEY"
          ]
        }
      },
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "*"
            ],
            "allowedHeaders": [
              "Content-Type",
              "Authorization"
            ],
            "allowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE"
            ]
          }
        },
        "region": "us-east-1",
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Scan",
                  "dynamodb:Query",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:GetItem"
                ],
                "Resource": [
                  "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms",
                  "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms/index/*",
                  "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands",
                  "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands/index/*",
                  "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache",
                  "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache/index/*"
                ]
              }
            ]
          }
        },
        "environment": {
          "VMS_TABLE": "vm-orchestrator-vms",
          "COMMANDS_TABLE": "vm-orchestrator-commands",
          "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "VmsApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/vm-orchestrator-api-dev-vmsApi"
              }
            },
            "CommandsApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/vm-orchestrator-api-dev-commandsApi"
              }
            },
            "JobCacheApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/vm-orchestrator-api-dev-jobCacheApi"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "vm-orchestrator-api",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vm-orchestrator-api-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vm-orchestrator-api-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Scan",
                            "dynamodb:Query",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem",
                            "dynamodb:GetItem"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms",
                            "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms/index/*",
                            "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands",
                            "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands/index/*",
                            "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache",
                            "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache/index/*"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "vm-orchestrator-api",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "VmsApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-50642b44-984c",
                  "S3Key": "serverless/vm-orchestrator-api/dev/1753555983734-2025-07-26T18:53:03.734Z/vm-orchestrator-api.zip"
                },
                "Handler": "handlers/vms.api",
                "Runtime": "nodejs20.x",
                "FunctionName": "vm-orchestrator-api-dev-vmsApi",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "VMS_TABLE": "vm-orchestrator-vms",
                    "COMMANDS_TABLE": "vm-orchestrator-commands",
                    "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "VmsApiLogGroup"
              ]
            },
            "CommandsApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-50642b44-984c",
                  "S3Key": "serverless/vm-orchestrator-api/dev/1753555983734-2025-07-26T18:53:03.734Z/vm-orchestrator-api.zip"
                },
                "Handler": "handlers/commands.api",
                "Runtime": "nodejs20.x",
                "FunctionName": "vm-orchestrator-api-dev-commandsApi",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "VMS_TABLE": "vm-orchestrator-vms",
                    "COMMANDS_TABLE": "vm-orchestrator-commands",
                    "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CommandsApiLogGroup"
              ]
            },
            "JobCacheApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-50642b44-984c",
                  "S3Key": "serverless/vm-orchestrator-api/dev/1753555983734-2025-07-26T18:53:03.734Z/vm-orchestrator-api.zip"
                },
                "Handler": "handlers/job-cache.api",
                "Runtime": "nodejs20.x",
                "FunctionName": "vm-orchestrator-api-dev-jobCacheApi",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "VMS_TABLE": "vm-orchestrator-vms",
                    "COMMANDS_TABLE": "vm-orchestrator-commands",
                    "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "JobCacheApiLogGroup"
              ]
            },
            "VmsApiLambdaVersion2wCPFLwnU1BSAzW7BOuwiNrxKbzTJSfKW3GxnsiQs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "VmsApiLambdaFunction"
                },
                "CodeSha256": "C7IL//uFglbADAN7PqrEN4FqAUE1QZ+L5owjQL4Dz8I="
              }
            },
            "CommandsApiLambdaVersionopeMEv5ce5brnXJOxThjWqqzxOgyKu5YzayL6enY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CommandsApiLambdaFunction"
                },
                "CodeSha256": "C7IL//uFglbADAN7PqrEN4FqAUE1QZ+L5owjQL4Dz8I="
              }
            },
            "JobCacheApiLambdaVersionoADcNkFA0ZCBohedVJWUiica9IoTbnayqZUTPt8M": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "JobCacheApiLambdaFunction"
                },
                "CodeSha256": "C7IL//uFglbADAN7PqrEN4FqAUE1QZ+L5owjQL4Dz8I="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-vm-orchestrator-api",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "AllowMethods": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "VmsApiLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "VmsApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationVmsApi": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "VmsApiLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiVms": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/vms",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationVmsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationVmsApi"
            },
            "HttpApiRoutePostApiVms": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/vms",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationVmsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationVmsApi"
            },
            "HttpApiRouteGetApiVmsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/vms/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationVmsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationVmsApi"
            },
            "HttpApiRoutePutApiVmsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /api/vms/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationVmsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationVmsApi"
            },
            "HttpApiRouteDeleteApiVmsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /api/vms/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationVmsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationVmsApi"
            },
            "CommandsApiLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CommandsApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCommandsApi": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CommandsApiLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiVmsVmidVarCommands": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/vms/{vmId}/commands",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCommandsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCommandsApi"
            },
            "HttpApiRoutePostApiVmsVmidVarCommands": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/vms/{vmId}/commands",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCommandsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCommandsApi"
            },
            "HttpApiRouteGetApiCommandsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/commands/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCommandsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCommandsApi"
            },
            "HttpApiRoutePutApiCommandsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /api/commands/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCommandsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCommandsApi"
            },
            "HttpApiRouteDeleteApiCommandsIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /api/commands/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCommandsApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCommandsApi"
            },
            "JobCacheApiLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "JobCacheApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationJobCacheApi": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "JobCacheApiLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiVmsVmidVarJobs": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/vms/{vmId}/jobs",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationJobCacheApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationJobCacheApi"
            },
            "HttpApiRoutePutApiJobsJobidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /api/jobs/{jobId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationJobCacheApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationJobCacheApi"
            },
            "HttpApiRouteDeleteApiJobsJobidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /api/jobs/{jobId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationJobCacheApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationJobCacheApi"
            },
            "VmsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "vm-orchestrator-vms",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "name",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "environment",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "NameEnvironmentIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "name",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "environment",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "CommandsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "vm-orchestrator-commands",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "vmId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "name",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "VmIdIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "vmId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  },
                  {
                    "IndexName": "VmIdNameIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "vmId",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "name",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "JobCacheTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "vm-orchestrator-job-cache",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "vmId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "jobId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "status",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "createdAt",
                    "AttributeType": "N"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "vmId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "jobId",
                    "KeyType": "RANGE"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "StatusIndex",
                    "KeySchema": [
                      {
                        "AttributeName": "status",
                        "KeyType": "HASH"
                      },
                      {
                        "AttributeName": "createdAt",
                        "KeyType": "RANGE"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ],
                "TimeToLiveSpecification": {
                  "AttributeName": "ttl",
                  "Enabled": true
                },
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-50642b44-984c",
              "Export": {
                "Name": "sls-vm-orchestrator-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "VmsApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "VmsApiLambdaVersion2wCPFLwnU1BSAzW7BOuwiNrxKbzTJSfKW3GxnsiQs"
              },
              "Export": {
                "Name": "sls-vm-orchestrator-api-dev-VmsApiLambdaFunctionQualifiedArn"
              }
            },
            "CommandsApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CommandsApiLambdaVersionopeMEv5ce5brnXJOxThjWqqzxOgyKu5YzayL6enY"
              },
              "Export": {
                "Name": "sls-vm-orchestrator-api-dev-CommandsApiLambdaFunctionQualifiedArn"
              }
            },
            "JobCacheApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "JobCacheApiLambdaVersionoADcNkFA0ZCBohedVJWUiica9IoTbnayqZUTPt8M"
              },
              "Export": {
                "Name": "sls-vm-orchestrator-api-dev-JobCacheApiLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-vm-orchestrator-api-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-vm-orchestrator-api-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "vmsApi": {
          "handler": "handlers/vms.api",
          "events": [
            {
              "httpApi": {
                "path": "/api/vms",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/vms"
            },
            {
              "httpApi": {
                "path": "/api/vms",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/vms"
            },
            {
              "httpApi": {
                "path": "/api/vms/{id}",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/vms/{id}"
            },
            {
              "httpApi": {
                "path": "/api/vms/{id}",
                "method": "PUT"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/api/vms/{id}"
            },
            {
              "httpApi": {
                "path": "/api/vms/{id}",
                "method": "DELETE"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/api/vms/{id}"
            }
          ],
          "name": "vm-orchestrator-api-dev-vmsApi",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "VmsApiLambdaVersion2wCPFLwnU1BSAzW7BOuwiNrxKbzTJSfKW3GxnsiQs"
        },
        "commandsApi": {
          "handler": "handlers/commands.api",
          "events": [
            {
              "httpApi": {
                "path": "/api/vms/{vmId}/commands",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/vms/{vmId}/commands"
            },
            {
              "httpApi": {
                "path": "/api/vms/{vmId}/commands",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/vms/{vmId}/commands"
            },
            {
              "httpApi": {
                "path": "/api/commands/{id}",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/commands/{id}"
            },
            {
              "httpApi": {
                "path": "/api/commands/{id}",
                "method": "PUT"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/api/commands/{id}"
            },
            {
              "httpApi": {
                "path": "/api/commands/{id}",
                "method": "DELETE"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/api/commands/{id}"
            }
          ],
          "name": "vm-orchestrator-api-dev-commandsApi",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CommandsApiLambdaVersionopeMEv5ce5brnXJOxThjWqqzxOgyKu5YzayL6enY"
        },
        "jobCacheApi": {
          "handler": "handlers/job-cache.api",
          "events": [
            {
              "httpApi": {
                "path": "/api/vms/{vmId}/jobs",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/vms/{vmId}/jobs"
            },
            {
              "httpApi": {
                "path": "/api/jobs/{jobId}",
                "method": "PUT"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/api/jobs/{jobId}"
            },
            {
              "httpApi": {
                "path": "/api/jobs/{jobId}",
                "method": "DELETE"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/api/jobs/{jobId}"
            }
          ],
          "name": "vm-orchestrator-api-dev-jobCacheApi",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "JobCacheApiLambdaVersionoADcNkFA0ZCBohedVJWUiica9IoTbnayqZUTPt8M"
        }
      },
      "resources": {
        "Resources": {
          "VmsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "vm-orchestrator-vms",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "environment",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "NameEnvironmentIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "name",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "environment",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "CommandsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "vm-orchestrator-commands",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "vmId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "VmIdIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "vmId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "VmIdNameIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "vmId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "name",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "JobCacheTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "vm-orchestrator-job-cache",
              "AttributeDefinitions": [
                {
                  "AttributeName": "vmId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "jobId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "vmId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "jobId",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "StatusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ]
        }
      },
      "region": "us-east-1",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Scan",
                "dynamodb:Query",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms",
                "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms/index/*",
                "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands",
                "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands/index/*",
                "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache",
                "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache/index/*"
              ]
            }
          ]
        }
      },
      "environment": {
        "VMS_TABLE": "vm-orchestrator-vms",
        "COMMANDS_TABLE": "vm-orchestrator-commands",
        "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "VmsApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vm-orchestrator-api-dev-vmsApi"
            }
          },
          "CommandsApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vm-orchestrator-api-dev-commandsApi"
            }
          },
          "JobCacheApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/vm-orchestrator-api-dev-jobCacheApi"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "vm-orchestrator-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vm-orchestrator-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vm-orchestrator-api-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Scan",
                          "dynamodb:Query",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem",
                          "dynamodb:GetItem"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms",
                          "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms/index/*",
                          "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands",
                          "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands/index/*",
                          "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache",
                          "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache/index/*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "vm-orchestrator-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "VmsApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-50642b44-984c",
                "S3Key": "serverless/vm-orchestrator-api/dev/1753555983734-2025-07-26T18:53:03.734Z/vm-orchestrator-api.zip"
              },
              "Handler": "handlers/vms.api",
              "Runtime": "nodejs20.x",
              "FunctionName": "vm-orchestrator-api-dev-vmsApi",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "VMS_TABLE": "vm-orchestrator-vms",
                  "COMMANDS_TABLE": "vm-orchestrator-commands",
                  "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VmsApiLogGroup"
            ]
          },
          "CommandsApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-50642b44-984c",
                "S3Key": "serverless/vm-orchestrator-api/dev/1753555983734-2025-07-26T18:53:03.734Z/vm-orchestrator-api.zip"
              },
              "Handler": "handlers/commands.api",
              "Runtime": "nodejs20.x",
              "FunctionName": "vm-orchestrator-api-dev-commandsApi",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "VMS_TABLE": "vm-orchestrator-vms",
                  "COMMANDS_TABLE": "vm-orchestrator-commands",
                  "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CommandsApiLogGroup"
            ]
          },
          "JobCacheApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-50642b44-984c",
                "S3Key": "serverless/vm-orchestrator-api/dev/1753555983734-2025-07-26T18:53:03.734Z/vm-orchestrator-api.zip"
              },
              "Handler": "handlers/job-cache.api",
              "Runtime": "nodejs20.x",
              "FunctionName": "vm-orchestrator-api-dev-jobCacheApi",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "VMS_TABLE": "vm-orchestrator-vms",
                  "COMMANDS_TABLE": "vm-orchestrator-commands",
                  "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "JobCacheApiLogGroup"
            ]
          },
          "VmsApiLambdaVersion2wCPFLwnU1BSAzW7BOuwiNrxKbzTJSfKW3GxnsiQs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VmsApiLambdaFunction"
              },
              "CodeSha256": "C7IL//uFglbADAN7PqrEN4FqAUE1QZ+L5owjQL4Dz8I="
            }
          },
          "CommandsApiLambdaVersionopeMEv5ce5brnXJOxThjWqqzxOgyKu5YzayL6enY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CommandsApiLambdaFunction"
              },
              "CodeSha256": "C7IL//uFglbADAN7PqrEN4FqAUE1QZ+L5owjQL4Dz8I="
            }
          },
          "JobCacheApiLambdaVersionoADcNkFA0ZCBohedVJWUiica9IoTbnayqZUTPt8M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "JobCacheApiLambdaFunction"
              },
              "CodeSha256": "C7IL//uFglbADAN7PqrEN4FqAUE1QZ+L5owjQL4Dz8I="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-vm-orchestrator-api",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type",
                  "Authorization"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "VmsApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VmsApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationVmsApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "VmsApiLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiVms": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/vms",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationVmsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationVmsApi"
          },
          "HttpApiRoutePostApiVms": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/vms",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationVmsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationVmsApi"
          },
          "HttpApiRouteGetApiVmsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/vms/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationVmsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationVmsApi"
          },
          "HttpApiRoutePutApiVmsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/vms/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationVmsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationVmsApi"
          },
          "HttpApiRouteDeleteApiVmsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/vms/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationVmsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationVmsApi"
          },
          "CommandsApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CommandsApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCommandsApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CommandsApiLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiVmsVmidVarCommands": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/vms/{vmId}/commands",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCommandsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCommandsApi"
          },
          "HttpApiRoutePostApiVmsVmidVarCommands": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/vms/{vmId}/commands",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCommandsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCommandsApi"
          },
          "HttpApiRouteGetApiCommandsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/commands/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCommandsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCommandsApi"
          },
          "HttpApiRoutePutApiCommandsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/commands/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCommandsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCommandsApi"
          },
          "HttpApiRouteDeleteApiCommandsIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/commands/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCommandsApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCommandsApi"
          },
          "JobCacheApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "JobCacheApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationJobCacheApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "JobCacheApiLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiVmsVmidVarJobs": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/vms/{vmId}/jobs",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationJobCacheApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationJobCacheApi"
          },
          "HttpApiRoutePutApiJobsJobidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /api/jobs/{jobId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationJobCacheApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationJobCacheApi"
          },
          "HttpApiRouteDeleteApiJobsJobidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/jobs/{jobId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationJobCacheApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationJobCacheApi"
          },
          "VmsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "vm-orchestrator-vms",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "environment",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "NameEnvironmentIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "name",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "environment",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "CommandsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "vm-orchestrator-commands",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "vmId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "VmIdIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "vmId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "VmIdNameIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "vmId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "name",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "JobCacheTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "vm-orchestrator-job-cache",
              "AttributeDefinitions": [
                {
                  "AttributeName": "vmId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "jobId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "createdAt",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "vmId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "jobId",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "StatusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "createdAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-50642b44-984c",
            "Export": {
              "Name": "sls-vm-orchestrator-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "VmsApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VmsApiLambdaVersion2wCPFLwnU1BSAzW7BOuwiNrxKbzTJSfKW3GxnsiQs"
            },
            "Export": {
              "Name": "sls-vm-orchestrator-api-dev-VmsApiLambdaFunctionQualifiedArn"
            }
          },
          "CommandsApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CommandsApiLambdaVersionopeMEv5ce5brnXJOxThjWqqzxOgyKu5YzayL6enY"
            },
            "Export": {
              "Name": "sls-vm-orchestrator-api-dev-CommandsApiLambdaFunctionQualifiedArn"
            }
          },
          "JobCacheApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "JobCacheApiLambdaVersionoADcNkFA0ZCBohedVJWUiica9IoTbnayqZUTPt8M"
            },
            "Export": {
              "Name": "sls-vm-orchestrator-api-dev-JobCacheApiLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-vm-orchestrator-api-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-vm-orchestrator-api-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": true
      },
      "orgObservabilityIntegrations": [
        {
          "integrationId": "byW3bxoF3KdSvKvYgNztnK",
          "awsAccountId": "526531833437",
          "status": "alive"
        }
      ],
      "serviceAppId": "WjTcSxMNdQt5bHSBys",
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>",
        "$source": {
          "CREDENTIALS_CODE": "<REDACTED>"
        }
      },
      "instanceParameters": null
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: caesari\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\napp: vm-orchestrator\nservice: vm-orchestrator-api\n\nplugins:\n  - serverless-dotenv-plugin\n\ncustom:\n  dotenv:\n    exclude:\n      - AWS_ACCESS_KEY_ID\n      - AWS_SECRET_ACCESS_KEY\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  httpApi:\n    cors:\n      allowedOrigins:\n        - \"*\"\n      allowedHeaders:\n        - Content-Type\n        - Authorization\n      allowedMethods:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n\n  region: \"us-east-1\"\n  iam:\n    role:\n      statements:\n        - Effect: \"Allow\"\n          Action:\n            - \"dynamodb:Scan\"\n            - \"dynamodb:Query\"\n            - \"dynamodb:PutItem\"\n            - \"dynamodb:UpdateItem\"\n            - \"dynamodb:DeleteItem\"\n            - \"dynamodb:GetItem\"\n          Resource:\n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.VMS_TABLE}\"\n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.VMS_TABLE}/index/*\"\n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.COMMANDS_TABLE}\"\n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.COMMANDS_TABLE}/index/*\"\n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.JOB_CACHE_TABLE}\"\n            - \"arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.JOB_CACHE_TABLE}/index/*\"\n  environment:\n    VMS_TABLE: ${env:AWS_DYNAMODB_VMS_TABLE, \"vm-orchestrator-vms\"}\n    COMMANDS_TABLE: ${env:AWS_DYNAMODB_COMMANDS_TABLE, \"vm-orchestrator-commands\"}\n    JOB_CACHE_TABLE: ${env:AWS_DYNAMODB_JOB_CACHE_TABLE, \"vm-orchestrator-job-cache\"}\n\nfunctions:\n  # VM Management API\n  vmsApi:\n    handler: handlers/vms.api\n    events:\n      - httpApi:\n          path: /api/vms\n          method: GET\n      - httpApi:\n          path: /api/vms\n          method: POST\n      - httpApi:\n          path: /api/vms/{id}\n          method: GET\n      - httpApi:\n          path: /api/vms/{id}\n          method: PUT\n      - httpApi:\n          path: /api/vms/{id}\n          method: DELETE\n\n  # Commands Management API\n  commandsApi:\n    handler: handlers/commands.api\n    events:\n      - httpApi:\n          path: /api/vms/{vmId}/commands\n          method: GET\n      - httpApi:\n          path: /api/vms/{vmId}/commands\n          method: POST\n      - httpApi:\n          path: /api/commands/{id}\n          method: GET\n      - httpApi:\n          path: /api/commands/{id}\n          method: PUT\n      - httpApi:\n          path: /api/commands/{id}\n          method: DELETE\n\n  # Job Cache Management\n  jobCacheApi:\n    handler: handlers/job-cache.api\n    events:\n      - httpApi:\n          path: /api/vms/{vmId}/jobs\n          method: GET\n      - httpApi:\n          path: /api/jobs/{jobId}\n          method: PUT\n      - httpApi:\n          path: /api/jobs/{jobId}\n          method: DELETE\n\nresources:\n  Resources:\n    # VMs Table\n    VmsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.VMS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: name\n            AttributeType: S\n          - AttributeName: environment\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: NameEnvironmentIndex\n            KeySchema:\n              - AttributeName: name\n                KeyType: HASH\n              - AttributeName: environment\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n\n    # Commands Table\n    CommandsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.COMMANDS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: vmId\n            AttributeType: S\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: VmIdIndex\n            KeySchema:\n              - AttributeName: vmId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n          - IndexName: VmIdNameIndex\n            KeySchema:\n              - AttributeName: vmId\n                KeyType: HASH\n              - AttributeName: name\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n\n    # Job Cache Table\n    JobCacheTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.JOB_CACHE_TABLE}\n        AttributeDefinitions:\n          - AttributeName: vmId\n            AttributeType: S\n          - AttributeName: jobId\n            AttributeType: S\n          - AttributeName: status\n            AttributeType: S\n          - AttributeName: createdAt\n            AttributeType: N\n        KeySchema:\n          - AttributeName: vmId\n            KeyType: HASH\n          - AttributeName: jobId\n            KeyType: RANGE\n        GlobalSecondaryIndexes:\n          - IndexName: StatusIndex\n            KeySchema:\n              - AttributeName: status\n                KeyType: HASH\n              - AttributeName: createdAt\n                KeyType: RANGE\n            Projection:\n              ProjectionType: ALL\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n        BillingMode: PAY_PER_REQUEST\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "678f4501-73b8-4db1-be01-feb3249005ff",
    "orgName": "caesari",
    "userId": "HFgKZkFmg9P5PWZZJV",
    "userName": "caesari",
    "serviceProviderAwsAccountId": "526531833437",
    "serviceProviderAwsCfStackName": "vm-orchestrator-api-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:526531833437:stack/vm-orchestrator-api-dev/c6111970-6a51-11f0-8b9e-0affe6f14a15",
    "serviceProviderAwsCfStackCreated": "2025-07-26T18:53:09.764Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "CommandsApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:526531833437:function:vm-orchestrator-api-dev-commandsApi:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-vm-orchestrator-api-dev-CommandsApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "JobCacheApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:526531833437:function:vm-orchestrator-api-dev-jobCacheApi:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-vm-orchestrator-api-dev-JobCacheApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "VmsApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:526531833437:function:vm-orchestrator-api-dev-vmsApi:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-vm-orchestrator-api-dev-VmsApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "ohb6y8uk2f",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-vm-orchestrator-api-dev-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-50642b44-984c",
        "ExportName": "sls-vm-orchestrator-api-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://ohb6y8uk2f.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-vm-orchestrator-api-dev-HttpApiUrl"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "VmsApiLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/vm-orchestrator-api-dev-vmsApi"
          }
        },
        "CommandsApiLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/vm-orchestrator-api-dev-commandsApi"
          }
        },
        "JobCacheApiLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/vm-orchestrator-api-dev-jobCacheApi"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "vm-orchestrator-api",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vm-orchestrator-api-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/vm-orchestrator-api-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Scan",
                        "dynamodb:Query",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem",
                        "dynamodb:GetItem"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms",
                        "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-vms/index/*",
                        "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands",
                        "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-commands/index/*",
                        "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache",
                        "arn:aws:dynamodb:us-east-1:526531833437:table/vm-orchestrator-job-cache/index/*"
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "vm-orchestrator-api",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "VmsApiLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-50642b44-984c",
              "S3Key": "serverless/vm-orchestrator-api/dev/1753555983734-2025-07-26T18:53:03.734Z/vm-orchestrator-api.zip"
            },
            "Handler": "handlers/vms.api",
            "Runtime": "nodejs20.x",
            "FunctionName": "vm-orchestrator-api-dev-vmsApi",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "VMS_TABLE": "vm-orchestrator-vms",
                "COMMANDS_TABLE": "vm-orchestrator-commands",
                "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "VmsApiLogGroup"
          ]
        },
        "CommandsApiLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-50642b44-984c",
              "S3Key": "serverless/vm-orchestrator-api/dev/1753555983734-2025-07-26T18:53:03.734Z/vm-orchestrator-api.zip"
            },
            "Handler": "handlers/commands.api",
            "Runtime": "nodejs20.x",
            "FunctionName": "vm-orchestrator-api-dev-commandsApi",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "VMS_TABLE": "vm-orchestrator-vms",
                "COMMANDS_TABLE": "vm-orchestrator-commands",
                "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CommandsApiLogGroup"
          ]
        },
        "JobCacheApiLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-50642b44-984c",
              "S3Key": "serverless/vm-orchestrator-api/dev/1753555983734-2025-07-26T18:53:03.734Z/vm-orchestrator-api.zip"
            },
            "Handler": "handlers/job-cache.api",
            "Runtime": "nodejs20.x",
            "FunctionName": "vm-orchestrator-api-dev-jobCacheApi",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "VMS_TABLE": "vm-orchestrator-vms",
                "COMMANDS_TABLE": "vm-orchestrator-commands",
                "JOB_CACHE_TABLE": "vm-orchestrator-job-cache"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "JobCacheApiLogGroup"
          ]
        },
        "VmsApiLambdaVersion2wCPFLwnU1BSAzW7BOuwiNrxKbzTJSfKW3GxnsiQs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "VmsApiLambdaFunction"
            },
            "CodeSha256": "C7IL//uFglbADAN7PqrEN4FqAUE1QZ+L5owjQL4Dz8I="
          }
        },
        "CommandsApiLambdaVersionopeMEv5ce5brnXJOxThjWqqzxOgyKu5YzayL6enY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CommandsApiLambdaFunction"
            },
            "CodeSha256": "C7IL//uFglbADAN7PqrEN4FqAUE1QZ+L5owjQL4Dz8I="
          }
        },
        "JobCacheApiLambdaVersionoADcNkFA0ZCBohedVJWUiica9IoTbnayqZUTPt8M": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "JobCacheApiLambdaFunction"
            },
            "CodeSha256": "C7IL//uFglbADAN7PqrEN4FqAUE1QZ+L5owjQL4Dz8I="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-vm-orchestrator-api",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type",
                "Authorization"
              ],
              "AllowMethods": [
                "GET",
                "POST",
                "PUT",
                "DELETE"
              ],
              "AllowOrigins": [
                "*"
              ]
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "VmsApiLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "VmsApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationVmsApi": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "VmsApiLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiVms": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/vms",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationVmsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationVmsApi"
        },
        "HttpApiRoutePostApiVms": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/vms",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationVmsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationVmsApi"
        },
        "HttpApiRouteGetApiVmsIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/vms/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationVmsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationVmsApi"
        },
        "HttpApiRoutePutApiVmsIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /api/vms/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationVmsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationVmsApi"
        },
        "HttpApiRouteDeleteApiVmsIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /api/vms/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationVmsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationVmsApi"
        },
        "CommandsApiLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CommandsApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCommandsApi": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CommandsApiLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiVmsVmidVarCommands": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/vms/{vmId}/commands",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCommandsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCommandsApi"
        },
        "HttpApiRoutePostApiVmsVmidVarCommands": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/vms/{vmId}/commands",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCommandsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCommandsApi"
        },
        "HttpApiRouteGetApiCommandsIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/commands/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCommandsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCommandsApi"
        },
        "HttpApiRoutePutApiCommandsIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /api/commands/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCommandsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCommandsApi"
        },
        "HttpApiRouteDeleteApiCommandsIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /api/commands/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCommandsApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCommandsApi"
        },
        "JobCacheApiLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "JobCacheApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationJobCacheApi": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "JobCacheApiLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiVmsVmidVarJobs": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/vms/{vmId}/jobs",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationJobCacheApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationJobCacheApi"
        },
        "HttpApiRoutePutApiJobsJobidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /api/jobs/{jobId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationJobCacheApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationJobCacheApi"
        },
        "HttpApiRouteDeleteApiJobsJobidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /api/jobs/{jobId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationJobCacheApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationJobCacheApi"
        },
        "VmsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "vm-orchestrator-vms",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "name",
                "AttributeType": "S"
              },
              {
                "AttributeName": "environment",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "NameEnvironmentIndex",
                "KeySchema": [
                  {
                    "AttributeName": "name",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "environment",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "CommandsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "vm-orchestrator-commands",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "vmId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "name",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "VmIdIndex",
                "KeySchema": [
                  {
                    "AttributeName": "vmId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "VmIdNameIndex",
                "KeySchema": [
                  {
                    "AttributeName": "vmId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "name",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "JobCacheTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "vm-orchestrator-job-cache",
            "AttributeDefinitions": [
              {
                "AttributeName": "vmId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "jobId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              },
              {
                "AttributeName": "createdAt",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "vmId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "jobId",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "StatusIndex",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "createdAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-50642b44-984c",
          "Export": {
            "Name": "sls-vm-orchestrator-api-dev-ServerlessDeploymentBucketName"
          }
        },
        "VmsApiLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "VmsApiLambdaVersion2wCPFLwnU1BSAzW7BOuwiNrxKbzTJSfKW3GxnsiQs"
          },
          "Export": {
            "Name": "sls-vm-orchestrator-api-dev-VmsApiLambdaFunctionQualifiedArn"
          }
        },
        "CommandsApiLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CommandsApiLambdaVersionopeMEv5ce5brnXJOxThjWqqzxOgyKu5YzayL6enY"
          },
          "Export": {
            "Name": "sls-vm-orchestrator-api-dev-CommandsApiLambdaFunctionQualifiedArn"
          }
        },
        "JobCacheApiLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "JobCacheApiLambdaVersionoADcNkFA0ZCBohedVJWUiica9IoTbnayqZUTPt8M"
          },
          "Export": {
            "Name": "sls-vm-orchestrator-api-dev-JobCacheApiLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-vm-orchestrator-api-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-vm-orchestrator-api-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}